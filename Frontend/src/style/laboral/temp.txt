         {firedInfo && <h2>Explicación</h2>}
         {firedInfo && <p className='opacity-90'>Está situación se da cuando tú empleador toma la decisión de dejarte sin trabajo con o sin una causa que lo justifique. Dependiendo el caso concreto deberá abonarte o no una indemnización.</p>}

         {optionsToggleShow[0].bool && <h2>Con Causa</h2>}
         {optionsToggleShow[0].bool && <p className='opacity-90'>Si tu empleador te despide con causa, habrá que analizar si la misma era de tal magnitud como para dejarte sin trabajo, caso contrario se podrá hacer el reclamo correspondiente. DEl mismo modo si la causa es FALSA se podrán reclamar las indemnizaciones correspondientes.</p>}

         {optionsToggleShow[1].bool && <h2>Sin Causa</h2>}
         {optionsToggleShow[1].bool   &&<p className='opacity-90'>En este caso tu empleador te despide sin dar justificación alguna. Si bien está en su derecho de hacerlo, deberá pagar las indemnizaciones correspondientes</p>}

         {optionsToggleShow[2].bool && <div>
            <form>
                <div className='md:absolute md:left-10 relative flex flex-col md:w-1/2'>
                  
                    <InputLabel htmlFor="outlined-adornment-amount" className='text-white absolute'>Mejor Remuneracion</InputLabel>
                    <OutlinedInput
                        id="outlined-adornment-amount"
                        startAdornment={<i className="fa-solid fa-dollar-sign mx-2"></i>}
                        label="Amount"
                        className='mt-10 bg-neutral-800 text-white text-2xl h-10 w-1/2 rounded-md' 
                    />
                    <div className='w-full flex gap-2'>
                        <TextField
                        id="date"
                        label="Fecha de ingreso"
                        type="date"
                        defaultValue=""
                        sx={{
                        width: 200,
                        "& input": { color: "white" },
                        "& label": { color: "white"}
                        }}
                        InputLabelProps={{
                        shrink: true
                        }}
                        
                        className='mt-6'
                        />
                        <TextField
                        id="date"
                        label="Fecha de egreso"
                        type="date"
                        defaultValue=""
                        sx={{
                        width: 200,
                        "& input": { color: "white" },
                        "& label": { color: "white"}
                        }}
                        InputLabelProps={{
                        shrink: true
                        }}
                        
                        className='mt-6'
                        />
                    </div>
                    <div>
                        <FormLabel id="demo-radio-buttons-group-label" className='flex text-white mt-4'>Motivo del fin de la relación laboral</FormLabel>
                        <RadioGroup
                            aria-labelledby="demo-radio-buttons-group-label"
                            defaultValue="Con causa"
                            name="radio-buttons-group"
                            className='flex flex-row flex-wrap w-3/2'
                        >
                            <FormControlLabel value="Con causa" control={<Radio />} label="Con causa" />
                            <FormControlLabel value="Sin causa" control={<Radio />} label="Sin causa" />
                            <FormControlLabel value="Renuncia" control={<Radio />} label="Renuncia" />
                        </RadioGroup>
                        <FormLabel id="demo-radio-buttons-group-label" className='flex text-white mt-4'>¿Hubo preaviso?</FormLabel>
                        <RadioGroup
                            aria-labelledby="demo-radio-buttons-group-label"
                            defaultValue="Si"
                            name="radio-buttons-group"
                            className='w-96 flex flex-row'
                        >
                            <FormControlLabel value="Si" control={<Radio />} label="Si" />
                            <FormControlLabel value="No" control={<Radio />} label="No" />
                        </RadioGroup>
                    </div>
                    
                </div>
            </form>
         </div>}


-------------------------fasapi

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse
from typing import List
import random
from fastapi.middleware.cors import CORSMiddleware



app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"]
)

class Chat:
    def __init__(self):
        #Conexiones activas del websocket
        self.active_connections: list[WebSocket] = [] 

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)

class AdminNotifier:
    def __init__(self, websocket: WebSocket):
        self.websocket = websocket

    async def notify(self, room_id: int):
        await self.websocket.send_text(f"Se ha agregado una nueva sala: {room_id}")


all_rooms: List[Chat] = [] # Cada instancia de Chat para su websocket
admin = None
admin_in: int = False

@app.get("/")
async def get():
    return {'message': 'hello world'}

#Add an instance of a socket manager class to the array of rooms
@app.post("/open")
async def open_websocket():
    new_chat = Chat()
    all_rooms.append(new_chat)
    room_id = len(all_rooms) - 1
    return {'room_id': room_id}

 
# Define websocket to an endpoint with id and 
@app.websocket('/ws/{room_id}')
async def websocket_endpoint(room_id: int, websocket: WebSocket):
    manager = all_rooms[room_id]
    await manager.connect(websocket)

    try:
        while True:
            message = await websocket.receive_text()
            await manager.broadcast(f"Mensaje recibido en la sala {room_id}: {message} y {manager.active_connections}")
    except WebSocketDisconnect:
        manager.disconnect(websocket)
        if not manager.active_connections:
            all_rooms.pop(room_id)

#Este ws nos permitira escuchar las rooms id existentes
@app.websocket('/ws/admin')
async def websocket_endpoint(websocket: WebSocket):
    global admin
    await websocket.accept()
    admin = AdminNotifier()
    try:
        while True:
            await manager.broadcast(f"Un cliente esta esperando en el chat f{}")
    except WebSocketDisconnect:
        admin = None

Contenedor de aplicaciones integrado

Permite compilar nuestras aplicaciones web como un archivo .jar (o .war)

Que te permita tener un .jar no es que te obligue



    useEffect(() => {
        const URL: string = ' ws://localhost:8000/ws/'+id;
        const ws = new WebSocket(URL);
        ws.onopen = () => {
            console.log('Conexión establecida');
          };
  
          ws.onmessage = (event) => {
            const message = event.data;
            console.log('Mensaje recibido:', message);
          };
  
          ws.onclose = () => {
            console.log('Conexión cerrada');
            // Realizar acciones adicionales si la conexión se cierra
          };
    
        // Cerrar la conexión WebSocket cuando el componente se desmonte
        return () => {
          if (socket) {
            socket.close();
          }
        };
      }, []);